{
  "addons": [
    "heroku-postgresql:hobby-dev",
    "newrelic:wayne",
    "rediscloud:30"
  ],
  "buildpacks": [
    {
      "url": "https://github.com/heroku/heroku-buildpack-apt"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-nodejs"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-python"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-pgbouncer"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-nginx"
    }
  ],
  "description": "open-discussions",
  "env": {
    "ALGOLIA_APP_ID": {
      "description": "Algolia Places app ID",
      "required": false
    },
    "ALGOLIA_API_KEY": {
      "description": "Algolia Places API key",
      "required": false
    },
    "AWS_ACCESS_KEY_ID": {
      "description": "AWS Access Key for S3 storage.",
      "required": false
    },
    "AWS_SECRET_ACCESS_KEY": {
      "description": "AWS Secret Key for S3 storage.",
      "required": false
    },
    "AWS_STORAGE_BUCKET_NAME": {
      "description": "S3 Bucket name.",
      "required": false
    },
    "BLACKLISTED_COURSES_URL": {
      "description": "URL of a text file containing blacklisted course ids",
      "required": false
    },
    "DUPLICATE_COURSES_URL": {
      "description": "URL of a text file containing course ids that are duplicates of each other",
      "required": false
    },
    "BOOTCAMPS_URL": {
      "description": "URL to retrieve bootcamps data",
      "required": false
    },
    "CLOUDFRONT_DIST": {
      "description": "Cloudfront distribution",
      "required": false
    },
    "CSAIL_BASE_URL": {
      "description": "CSAIL courses base URL",
      "required": false
    },
    "EDX_API_ACCESS_TOKEN_URL": {
      "description": "URL to retrieve a MITx access token",
      "required": false
    },
    "EDX_API_URL": {
      "description": "URL to retrieve MITx course data from",
      "required": false
    },
    "EDX_API_CLIENT_ID": {
      "description": "EdX client id to access the MITx course catalog API",
      "required": false
    },
    "EDX_API_CLIENT_SECRET": {
      "description": "EdX secret key to access the MITx course catalog API",
      "required": false
    },
    "ELASTICSEARCH_HTTP_AUTH": {
      "description": "Basic auth settings for connecting to Elasticsearch"
    },
    "ELASTICSEARCH_INDEX": {
      "description": "Index to use on Elasticsearch",
      "required": true
    },
    "ELASTICSEARCH_INDEXING_CHUNK_SIZE": {
      "description": "Chunk size to use for Elasticsearch indexing tasks",
      "required": false
    },
    "ELASTICSEARCH_MAX_SUGGEST_HITS": {
      "description": "Return suggested search terms only if the number of hits is equal to or below this value",
      "required": false
    },
    "ELASTICSEARCH_MAX_SUGGEST_RESULTS": {
      "description": "The maximum number of search term suggestions to return",
      "required": false
    },
    "ELASTICSEARCH_MIN_QUERY_SIZE": {
      "description": "Minimimum number of characters in a query string to search for",
      "required": false
    },
    "ELASTICSEARCH_URL": {
      "description": "URL for connecting to Elasticsearch cluster"
    },
    "GA_TRACKING_ID": {
      "description": "Google analytics tracking ID",
      "required": false
    },
    "INDEXING_API_USERNAME": {
      "description": "Reddit username used for indexing"
    },
    "INDEXING_ERROR_RETRIES": {
      "description": "Number of times to retry an indexing operation on failure",
      "required": false
    },
    "MAILGUN_URL": {
      "description": "The URL for communicating with Mailgun"
    },
    "MAILGUN_KEY": {
      "description": "The token for authenticating against the Mailgun API"
    },
    "MAILGUN_FROM_EMAIL": {
      "description": "Email which mail comes from"
    },
    "MAILGUN_BCC_TO_EMAIL": {
      "description": "Email address used with bcc email",
      "required": false
    },
    "MAILGUN_SENDER_DOMAIN": {
      "description": "Domain used for emails sent via mailgun"
    },
    "MAX_S3_GET_ITERATIONS": {
      "description": "Max retry attempts to get an S3 object",
      "required": false
    },
    "MICROMASTERS_CATALOG_API_URL": {
      "description": "URL to MicroMasters catalog API",
      "required": "false"
    },
    "MITPE_BASE_URL": {
      "description": "Base URL for MIT Professional Education website",
      "required": "false"
    },
    "MITX_ALT_URL": {
      "description": "Base alternate URL for MITx courses",
      "required": false
    },
    "MITX_BASE_URL": {
      "description": "Base default URL for MITx courses",
      "required": false
    },
    "MIT_WS_CERTIFICATE": {
      "description": "X509 certificate as a string",
      "required": false
    },
    "MIT_WS_PRIVATE_KEY": {
      "description": "X509 private key as a string",
      "required": false
    },
    "OCW_BASE_URL": {
      "description": "Base URL for OCW courses",
      "required": false
    },
    "OCW_CONTENT_BUCKET_NAME": {
      "description": "Name of S3 bucket containing OCW course data",
      "required": false
    },
    "OCW_CONTENT_ACCESS_KEY": {
      "description": "AWS access key for OCW content bucket",
      "required": false
    },
    "OCW_CONTENT_SECRET_ACCESS_KEY": {
      "description": "AWS secret key for OCW content bucket",
      "required": false
    },
    "OCW_ITERATOR_CHUNK_SIZE": {
      "description": "Chunk size for iterating over OCW courses for master json",
      "required": false
    },
    "OCW_LEARNING_COURSE_BUCKET_NAME": {
      "description": "Name of S3 bucket to upload OCW course media",
      "required": false
    },
    "OCW_LEARNING_COURSE_ACCESS_KEY": {
      "description": "AWS access key for OCW media upload bucket",
      "required": false
    },
    "OCW_LEARNING_COURSE_SECRET_ACCESS_KEY": {
      "description": "AWS secret key for OCW media upload bucket",
      "required": false
    },
    "OCW_UPLOAD_IMAGE_ONLY": {
      "description": "Upload course image only instead of all OCW files",
      "required": false
    },
    "OCW_WEBHOOK_DELAY": {
      "description": "Delay in seconds to process an OCW course after receiving webhook",
      "required": false
    },
    "OCW_WEBHOOK_KEY": {
      "description": "Authentication parameter value that should be passed in a webhook",
      "required": false
    },
    "OLL_ALT_URL": {
      "description": "Base alternate URL for OLL courses",
      "required": false
    },
    "OLL_API_ACCESS_TOKEN_URL": {
      "description": "URL to retrieve a OLL access token",
      "required": false
    },
    "OLL_API_URL": {
      "description": "URL to retrieve OLL course data from",
      "required": false
    },
    "OLL_API_CLIENT_ID": {
      "description": "Openedx client id to access the OLL course catalog API",
      "required": false
    },
    "OLL_API_CLIENT_SECRET": {
      "description": "Openedx secret key to access the OLL course catalog API",
      "required": false
    },
    "OLL_BASE_URL": {
      "description": "Base default URL for OLL courses",
      "required": false
    },
    "OPEN_DISCUSSIONS_ADMIN_EMAIL": {
      "description": "E-mail to send 500 reports to."
    },
    "OPEN_DISCUSSIONS_BASE_URL": {
      "description": "Base url to link users to in emails"
    },
    "OPEN_DISCUSSIONS_CHANNEL_POST_LIMIT": {
      "description": "Number of posts to display on the frontpage and channels",
      "required": false
    },
    "OPEN_DISCUSSIONS_COOKIE_NAME": {
      "description": "Name of the cookie for the JWT auth token"
    },
    "OPEN_DISCUSSIONS_COOKIE_DOMAIN": {
      "description": "Domain for the cookie for the JWT auth token"
    },
    "OPEN_DISCUSSIONS_DEFAULT_CHANNEL_BACKPOPULATE_BATCH_SIZE": {
      "description": "Number of users to sync per backpopulate batch",
      "required": false
    },
    "OPEN_DISCUSSIONS_RELATED_POST_COUNT": {
      "description": "Number of related posts to fetch",
      "required": false
    },
    "OPEN_DISCUSSIONS_DEFAULT_SITE_KEY": {
      "description": "The default site key to use for JWT tokens missing one"
    },
    "OPEN_DISCUSSIONS_DB_CONN_MAX_AGE": {
      "value": "0"
    },
    "OPEN_DISCUSSIONS_DB_DISABLE_SSL": {
      "value": "True"
    },
    "OPEN_DISCUSSIONS_DB_DISABLE_SS_CURSORS": {
      "description": "Disable server-side cursors",
      "required": false
    },
    "OPEN_DISCUSSIONS_EMAIL_HOST": {
      "description": "Outgoing e-mail settings"
    },
    "OPEN_DISCUSSIONS_EMAIL_PASSWORD": {
      "description": "Outgoing e-mail settings"
    },
    "OPEN_DISCUSSIONS_EMAIL_PORT": {
      "description": "Outgoing e-mail settings",
      "value": "587"
    },
    "OPEN_DISCUSSIONS_EMAIL_TLS": {
      "description": "Outgoing e-mail settings",
      "value": "True"
    },
    "OPEN_DISCUSSIONS_EMAIL_USER": {
      "description": "Outgoing e-mail settings"
    },
    "OPEN_DISCUSSIONS_ENVIRONMENT": {
      "description": "The execution environment that the app is in (e.g. dev, staging, prod)"
    },
    "OPEN_DISCUSSIONS_FROM_EMAIL": {
      "description": "E-mail to use for the from field"
    },
    "OPEN_DISCUSSIONS_LOG_LEVEL": {
      "description": "The log level for the application",
      "required": true,
      "value": "INFO"
    },
    "OPEN_DISCUSSIONS_HOT_POST_REPAIR_DELAY": {
      "description": "How many second to wait until attempting to repair a missing post",
      "required": false
    },
    "OPEN_DISCUSSIONS_HOT_POST_REPAIR_LIMIT": {
      "description": "Maximum number of posts in the history to check for a missing post",
      "required": false
    },
    "OPEN_DISCUSSIONS_JWT_SECRET": {
      "description": "Shared secret for JWT auth tokens",
      "required": true
    },
    "OPEN_DISCUSSIONS_MAX_COMMENT_DEPTH": {
      "description": "Maximum depth of a comment",
      "required": false
    },
    "OPEN_DISCUSSIONS_NOTIFICATION_ATTEMPT_RATE_LIMIT": {
      "description": "The per-worker rate limit at which to generate pending EmailNotification frontpage records",
      "required": false
    },
    "OPEN_DISCUSSIONS_NOTIFICATION_ATTEMPT_CHUNK_SIZE": {
      "description": "The size of each attempt batch",
      "required": false
    },
    "OPEN_DISCUSSIONS_NOTIFICATION_SEND_CHUNK_SIZE": {
      "description": "The size of each sending batch",
      "required": false
    },
    "OPEN_DISCUSSIONS_REDDIT_ACCESS_TOKEN": {
      "description": "Access token for securing trusted APIs to reddit",
      "required": false
    },
    "OPEN_DISCUSSIONS_REDDIT_CLIENT_ID": {
      "description": "OAuth client ID for authentication with reddit",
      "required": true
    },
    "OPEN_DISCUSSIONS_REDDIT_SECRET": {
      "description": "OAuth secret for authentication with reddit",
      "required": true
    },
    "OPEN_DISCUSSIONS_REDDIT_URL": {
      "description": "URL including protocol to reddit host (e.g. https://reddit.local)",
      "required": true
    },
    "OPEN_DISCUSSIONS_REDDIT_VALIDATE_SSL": {
      "description": "If false, disables validation of Reddit's SSL certificate"
    },
    "OPEN_DISCUSSIONS_SECURE_SSL_REDIRECT": {
      "description": "Application-level SSL redirect setting.",
      "value": "True"
    },
    "OPEN_DISCUSSIONS_SIMILAR_RESOURCES_COUNT": {
      "description": "Number of similar resources to return",
      "required": false
    },
    "OPEN_DISCUSSIONS_SUPPORT_EMAIL": {
      "description": "Email address listed for customer support"
    },
    "OPEN_DISCUSSIONS_UNSUBSCRIBE_TOKEN_MAX_AGE_SECONDS": {
      "description": "Maximum age of unsubscribe tokens in seconds",
      "required": false
    },
    "OPEN_DISCUSSIONS_USE_S3": {
      "description": "Use S3 for storage backend (required on Heroku)",
      "value": "False"
    },
    "OPEN_RESOURCES_MIN_DOC_FREQ": {
      "description": "Elasticsearch min_doc_freq value for determining similar resources",
      "required": false
    },
    "OPEN_RESOURCES_MIN_TERM_FREQ": {
      "description": "Elasticsearch min_term_freq value for determining similar resources",
      "required": false
    },
    "OPEN_VIDEO_DATA_BRANCH": {
      "description": "Branch in the open video data repository to use for video downloads",
      "required": false
    },
    "OPEN_VIDEO_MAX_TOPICS": {
      "description": "Maximum number of topics to assign a video",
      "required": false
    },
    "OPEN_VIDEO_MIN_DOC_FREQ": {
      "description": "Elasticsearch min_doc_freq value for determing video topics",
      "required": false
    },
    "OPEN_VIDEO_MIN_TERM_FREQ": {
      "description": "Elasticsearch min_term_freq value for determing video topics",
      "required": false
    },
    "OPEN_VIDEO_USER_LIST_OWNER": {
      "description": "User who will own user lists generated from playlists",
      "required": false
    },
    "NEW_RELIC_APP_NAME": {
      "description": "Application identifier in New Relic."
    },
    "NODE_MODULES_CACHE": {
      "description": "If false, disables the node_modules cache to fix yarn install",
      "value": "false"
    },
    "PGBOUNCER_DEFAULT_POOL_SIZE": {
      "value": "50"
    },
    "PGBOUNCER_MIN_POOL_SIZE": {
      "value": "5"
    },
    "RECAPTCHA_SITE_KEY": {
      "description": "Google Recaptcha site key",
      "required": false
    },
    "RECAPTCHA_SECRET_KEY": {
      "description": "Google Recaptcha secret key",
      "required": false
    },
    "SOCIAL_AUTH_SAML_LOGIN_URL": {
      "description": "Custom login url for SAML",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_ENTITY_ID" : {
      "description": "SAML Service Provider Entity ID",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_PUBLIC_CERT": {
      "description": "SAML Service Provider x509 public certificate string",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SP_PRIVATE_KEY": {
      "description": "SAML Service Provider x509 private key",
      "required": false
    },
    "SOCIAL_AUTH_SAML_ORG_DISPLAYNAME": {
      "description": "SAML Service Provider organization display name",
      "required": false
    },
    "SOCIAL_AUTH_SAML_CONTACT_NAME": {
      "description": "SAML Service Provider technical/support contact name",
      "required": false
    },
    "SOCIAL_AUTH_SAML_SECURITY_ENCRYPTED": {
      "description": "Require encrypted assertions for SAML Service Provider",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ENTITY_ID": {
      "description": "SAML Identity Provider EntityID",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_URL": {
      "description": "SAML Identity Provider Http-Redirect URL",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_X509": {
      "description": "SAML Identity Provider X509 certificate string",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_PERM_ID": {
      "description": "SAML Identity Provider attribute for user permanent id",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_NAME": {
      "description": "SAML Identity Provider attribute for user name",
      "required": false
    },
    "SOCIAL_AUTH_SAML_IDP_ATTRIBUTE_EMAIL": {
      "description": "SAML Identity Provider attribute for user email",
      "required": false
    },
    "SECRET_KEY": {
      "description": "Django secret key.",
      "generator": "secret"
    },
    "SEE_BASE_URL": {
      "description": "The base URL for Sloan Executive Education",
      "required": false,
    },
    "SENTRY_DSN": {
      "description": "The connection settings for Sentry"
    },
    "SENTRY_LOG_LEVEL": {
      "description": "The log level for Sentry",
      "required": false
    },
    "STATUS_TOKEN": {
      "description": "Token to access the status API."
    },
    "TIKA_CLIENT_ONLY": {
      "description": "use tika-python library in client mode",
      "required": false
    },
    "TIKA_SERVER_ENDPOINT": {
      "description": "URL of tika server for extracting text",
      "required": false
    },
    "TIKA_ACCESS_TOKEN": {
      "description": "X-Access-Token value for tika requests",
      "required": false
    },
    "USE_X_FORWARDED_PORT": {
      "description": "Use the X-Forwarded-Port",
      "required": false
    },
    "USE_X_FORWARDED_HOST": {
      "description": "Use the X-Forwarded-Host",
      "required": false
    },
    "CKEDITOR_ENVIRONMENT_ID": {
      "description": "env ID for CKEditor EasyImage auth",
      "required": false
    },
    "CKEDITOR_SECRET_KEY": {
      "description": "secret key for CKEditor EasyImage auth",
      "required": false
    },
    "CKEDITOR_UPLOAD_URL": {
      "description": "upload URL for CKEditor EasyImage",
      "required": false
    },
    "XPRO_CATALOG_API_URL": {
      "description": "The catalog url for xpro programs",
      "required": false
    },
    "XPRO_COURSES_API_URL": {
      "description": "The api url for xpro courses",
      "required": false
    },
    "XPRO_ITERATOR_CHUNK_SIZE": {
      "description": "Chunk size for iterating over xPRO courses for master json",
      "required": false
    },
    "XPRO_LEARNING_COURSE_BUCKET_NAME": {
      "description": "Name of S3 bucket to upload xPRO course media",
      "required": false
    },
    "XPRO_LEARNING_COURSE_ACCESS_KEY": {
      "description": "AWS access key for xPRO media upload bucket",
      "required": false
    },
    "XPRO_LEARNING_COURSE_SECRET_ACCESS_KEY": {
      "description": "AWS secret key for xPRO media upload bucket",
      "required": false
    },
    "YOUTUBE_DEVELOPER_KEY": {
      "description": "The key to the google youtube api",
      "required": false
    },
    "YOUTUBE_FETCH_SCHEDULE_SECONDS": {
      "description": "The time in seconds between periodic syncs of youtube videos",
      "required": false
    },
    "YOUTUBE_FETCH_TRANSCRIPT_SCHEDULE_SECONDS": {
      "description": "The time in seconds between periodic syncs of youtube video transcripts",
      "required": false
    },
    "YOUTUBE_FETCH_TRANSCRIPT_SLEEP_SECONDS": {
      "description": "Sleep time between requests to the youtube transcripts api",
      "required": false
    }
  },
  "keywords": [
    "Django",
    "Python",
    "MIT",
    "Office of Digital Learning"
  ],
  "name": "open_discussions",
  "repository": "https://github.com/mitodl/mit-open",
  "scripts": {
    "postdeploy": "./manage.py migrate --noinput"
  },
  "success_url": "/",
  "website": "https://github.com/mitodl/mit-open"
}
