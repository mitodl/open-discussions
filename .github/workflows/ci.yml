name: CI
on: [push]
jobs:
  python-tests:
    runs-on: ubuntu-22.04

    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres:12.19
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432

      redis:
        image: redis:5.0.14
        ports:
          - 6379:6379

      elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.21
        env:
          network.host: "0.0.0.0"
          http.cors.enabled: "true"
          http.cors.allow-origin: "*"
          http.max_content_length: "10mb"
          rest.action.multi.allow_explicit_index: "false"
          ES_JAVA_OPTS: "-Xms1024m -Xmx1024m"
          discovery.type: "single-node"
        ports:
          - 9200:9200

    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: update apt
        run: sudo apt-get update -y

      - name: Apt install
        run: cat Aptfile | sudo xargs apt-get install

      - name: Install poetry
        uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.11.4'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Code formatting
        run: poetry run black --check .

      - name: Lint
        run: poetry run pylint ./**/*.py

      - name: Create test local state
        run: ./scripts/test/stub-data.sh
      - name: Tests
        run: |
          export MEDIA_ROOT="$(mktemp -d)"
          ./scripts/test/python_tests.sh
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres # pragma: allowlist secret
          OPEN_DISCUSSIONS_SECURE_SSL_REDIRECT: 'False'
          OPEN_DISCUSSIONS_DB_DISABLE_SSL: 'True'
          OPEN_DISCUSSIONS_FEATURES_DEFAULT: 'True'
          OPEN_DISCUSSIONS_REDDIT_URL: https://reddit.local
          OPEN_DISCUSSIONS_REDDIT_VALIDATE_SSL: 'False'
          OPEN_DISCUSSIONS_REDDIT_CLIENT_ID: od_client_id
          OPEN_DISCUSSIONS_REDDIT_SECRET: od_client_secret # pragma: allowlist secret
          OPENSEARCH_URL: localhost:9200
          CELERY_TASK_ALWAYS_EAGER: 'True'
          CELERY_BROKER_URL: redis://localhost:6379/4
          CELERY_RESULT_BACKEND: redis://localhost:6379/4
          TIKA_CLIENT_ONLY: 'True'
          AKISMET_IS_TESTING: 'True'
          OPEN_DISCUSSIONS_BASE_URL: http://localhost:8063/
          MAILGUN_KEY: fake_mailgun_key
          MAILGUN_SENDER_DOMAIN: other.fake.site
          OPENSEARCH_INDEX: testindex
          INDEXING_API_USERNAME: mitodl
          OPEN_DISCUSSIONS_COOKIE_DOMAIN: localhost
          OPEN_DISCUSSIONS_COOKIE_NAME: cookie_monster

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@29386c70ef20e286228c72b668a06fd0e8399192 # v1
        with:
          file: ./coverage.xml

  javascript-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      - uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v3
        with:
          node-version: '16.15.1'
          cache: 'yarn'

      - name: Setup environment
        run: sudo apt-get install libelf1

      - name: Install dependencies
        run: yarn install --immutable

      - name: Webpack build
        run: yarn run build

      - name: Lints
        run: yarn run lint-check

      - name: Code formatting
        run: yarn run fmt-check

      - name: Scss lint
        run: yarn run scss-lint

      - name: Typecheck
        run: yarn run typecheck

      - name: Tests (old; mocha)
        run:  yarn workspace open-discussions run test
        env:
          NODE_ENV: test

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@410541432439795d30db6501fb1d8178eb41e502 # v1

      - name: Tests
        run: yarn test --max-workers ${{ steps.cpu-cores.outputs.count }}
        env:
          CODECOV: true
          NODE_ENV: test

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@29386c70ef20e286228c72b668a06fd0e8399192 # v1
        with:
          file: coverage/lcov.info
